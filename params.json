{"name":"Swt-gui-transformer","body":"Fast(er) building of SWT-based user interfaces\r\n=========\r\n\r\nHow to download and try it\r\n----------------------\r\n\r\nThis project is published as a Maven artifact so you can just go ahead and include it in your \r\nBuildr, Maven, Ivy etc:\r\n\r\n        <dependency>\r\n            <groupId>net.milanaleksic</groupId>\r\n            <artifactId>swt-gui-transformer-core</artifactId>\r\n            <version>0.1.5</version>\r\n        </dependency>\r\n\r\nIf you wish to play with the GUI interactive editor you can download it and run it also\r\nvia single dependency:\r\n\r\n        <dependency>\r\n            <groupId>net.milanaleksic</groupId>\r\n            <artifactId>swt-gui-transformer-editor</artifactId>\r\n            <version>0.1.5</version>\r\n        </dependency>\r\n\r\nThe repository where this artifact is deployed is:\r\n\r\n        <repository>\r\n            <id>mavenrepo-maven.milanaleksic.net</id>\r\n            <name>MilanAleksic.Net repository for Maven</name>\r\n            <url>http://maven.milanaleksic.net/release/</url>\r\n            <layout>default</layout>\r\n        </repository>\r\n        \r\nMotivation and design approach\r\n----------------------\r\n\r\nCreating pure SWT interfaces is often a headache since it is hard to follow up what is happening in the\r\ncode if you have complex UI tree. \r\n\r\nYes, you can divide the code into thousand methods, but it still does not make it easier to focus on the\r\nfunctional code if you have so much ui-generating code.\r\n\r\nThere are some very innovative approaches to fix this problem (before all others - GroovySWT) but this project\r\ngoes one step further since it does similar thing while you still stay in pure Java. \r\n\r\nSGT in fact uses JSON input files as definition of the UI Shell and generates all of the components for you. \r\n\r\n### Accessing widgets\r\n\r\nYou can access all the components in the UI either\r\n\r\n1. by asking for them using their name (something similar to the Servlet attribute/parameter approach for accessing) \r\nusing `net.milanaleksic.guitransformer.TransformationContext.<*widgetClass*>getMappedObject(*widgetName*)`\r\n\r\n2. or using annotation `net.milanaleksic.guitransformer.EmbeddedComponent` in your form class to have the component\r\ninjected for you (approach based on dependency injection pattern)\r\n\r\nIn my opinion, first approach is useful for the cases when you wish to execute a simple and small action, like \r\nsetting a *dynamic* text in some component (e.g. web service version fetched from far away). Second approach\r\nis useful when you wish to maintain reference to the widget throughout the life of the form (e.g. you need to keep\r\nreference to username/password text widgets until the user clicks on OK).\r\n\r\n### Event handling\r\n\r\nNo, you don't need to attach event listeners by your self, SGT takes care of that (unless you wish to do something\r\nreally complex which I did not cover, in which case you need to take a look in part of text \"Accessing widgets\").\r\n\r\nThe way to handle automatic event listeners is based on injection and widget naming. If you give your widget a name\r\nthen you can include a field of type `org.eclipse.swt.widgets.Listener` and annotate it with \r\n`net.milanaleksic.guitransformer.EmbeddedEventListener` or, in case you wish to use the same event listeners\r\nfor multiple events from multiple widgets (or same event type from multiple widgets or different event types\r\nfrom same widget - I think you got the picture), use annotation \r\n`net.milanaleksic.guitransformer.EmbeddedEventListeners`.\r\n\r\n\r\nSimple example\r\n----------------------\r\n\r\n\r\n\r\n\r\nProject dependencies\r\n----------------------\r\n\r\nSWT GUI Transformer depends on following frameworks/libraries:\r\n - (of course) **SWT**\r\n - Google **Guava**\r\n - **Jackson** - fastest JSON parser\r\n - **javax.inject** provider (for example Google Guice or Spring)\r\n\r\nIf you don't use these libraries than you might need to fork the code\r\nand try to hack your way through.\r\n\r\nJRE required is 1.6.0\r\n\r\nProviders\r\n=========\r\n\r\n\r\nMessages string provider\r\n----------------------\r\nUse your DI container to override `net.milanaleksic.guitransformer.providers.ResourceBundleProvider`\r\nwith your implementation or just route it to SimpleResourceBundleProvider to always use messages_en.properties\r\n(or default messages.properties if first does not exist).\r\n\r\nObject provider\r\n----------------------\r\nWhen you use named object syntax to ask from the DI for a named object in JSON definition,\r\nyou basically ask it from implementation of `net.milanaleksic.guitransformer.providers.ObjectProvider`\r\nyou registered in the DI container.\r\nYou can though use AlwaysReturnNullObjectProvider to always embed null when named object is requested.\r\n\r\nImages provider\r\n----------------------\r\nUse your DI container to override `net.milanaleksic.guitransformer.providers.ImageProvider`\r\nwith your implementation or just route it to AlwaysReturnNullImageProvider to always embed null\r\nwhen asked for image.\r\n\r\n\r\nSome development notes:\r\n======================\r\n\r\nSince Eclipse doesn't really like to use Maven to store SWT artifacts (at least for now)\r\nif you are not able to fetch Maven artifacts please install them locally manually.\r\nI know it's not a popular approach but there's nothing I can do :)\r\n\r\n    mvn install:install-file -DgroupId=org.eclipse.swt\r\n      -DartifactId=org.eclipse.swt.win32.win32.x86 -Dversion=3.7.2\r\n      -Dfile=swt-3.7.2-win32-win32-x86-debug.jar -Dpackaging=jar -DgeneratePom=true\r\n\r\nI propose using debug artifacts since it allows you to do so much more in debug mode\r\nin you IDE than normal artifacts! Of course in production mode do pack the non-debug version\r\nbesides the jar of GUI Transformer. This is the approach used in Eclipse's testing Maven\r\nrepository used in the POM of the project - although it is not up to date with latest\r\nstable SWT version - not by a long shot.","tagline":"SWT GUI Transformer","google":"UA-31731496-1","note":"Don't delete this file! It's used internally to help with page regeneration."}